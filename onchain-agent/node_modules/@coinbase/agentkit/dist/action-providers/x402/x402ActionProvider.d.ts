import { z } from "zod";
import { ActionProvider } from "../actionProvider";
import { Network } from "../../network";
import { PaidRequestSchema, FetchPaymentInfoSchema } from "./schemas";
import { EvmWalletProvider } from "../../wallet-providers";
/**
 * X402ActionProvider is an action provider for making paid requests to x402-protected APIs.
 */
export declare class X402ActionProvider extends ActionProvider<EvmWalletProvider> {
    /**
     * Constructor for the X402ActionProvider.
     */
    constructor();
    /**
     * Makes a paid request to an x402-protected API endpoint.
     *
     * @param walletProvider - The wallet provider to use for payment signing.
     * @param args - The input arguments for the action.
     * @returns A message containing the API response data.
     */
    paidRequest(walletProvider: EvmWalletProvider, args: z.infer<typeof PaidRequestSchema>): Promise<string>;
    /**
     * Fetches payment information from an x402-protected API endpoint without making the payment.
     *
     * @param walletProvider - The wallet provider (not used for this action but required by interface).
     * @param args - The input arguments for the action.
     * @returns A message containing the payment requirements and endpoint information.
     */
    fetchPaymentInfo(walletProvider: EvmWalletProvider, args: z.infer<typeof FetchPaymentInfoSchema>): Promise<string>;
    /**
     * Checks if the X402 action provider supports the given network.
     *
     * @param network - The network to check.
     * @returns True if the X402 action provider supports the network, false otherwise.
     */
    supportsNetwork: (network: Network) => boolean;
}
export declare const x402ActionProvider: () => X402ActionProvider;
