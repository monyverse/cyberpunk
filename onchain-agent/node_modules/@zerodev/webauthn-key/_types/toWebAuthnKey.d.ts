import type { PublicKeyCredentialRequestOptionsJSON } from "@simplewebauthn/types";
import { type Hex, type SignableMessage } from "viem";
export declare enum WebAuthnMode {
    Register = "register",
    Login = "login"
}
export type WebAuthnKey = {
    pubX: bigint;
    pubY: bigint;
    authenticatorId: string;
    authenticatorIdHash: Hex;
    rpID: string;
    signMessageCallback?: (message: SignableMessage, rpId: string, chainId: number, allowCredentials?: PublicKeyCredentialRequestOptionsJSON["allowCredentials"]) => Promise<Hex>;
};
interface BaseParams {
    mode?: WebAuthnMode;
    credentials?: RequestCredentials;
    passkeyServerHeaders?: Record<string, string>;
    useRN?: boolean;
}
export interface ParamsWithKey extends BaseParams {
    webAuthnKey: WebAuthnKey;
    rpID: string;
    passkeyName?: string;
    passkeyServerUrl?: string;
}
export interface ParamsWithoutKey extends BaseParams {
    webAuthnKey?: undefined;
    rpID?: string;
    passkeyName: string;
    passkeyServerUrl: string;
}
export type WebAuthnAccountParams = ParamsWithKey | ParamsWithoutKey;
export declare const encodeWebAuthnPubKey: (pubKey: WebAuthnKey) => `0x${string}`;
export declare const toWebAuthnKey: ({ webAuthnKey, rpID, passkeyName, passkeyServerUrl, mode, credentials, passkeyServerHeaders }: WebAuthnAccountParams) => Promise<WebAuthnKey>;
export {};
//# sourceMappingURL=toWebAuthnKey.d.ts.map