import { type Hex } from "viem";
export declare const isRIP7212SupportedNetwork: (chainId: number) => boolean;
export declare const uint8ArrayToHexString: (array: Uint8Array) => `0x${string}`;
export declare const hexStringToUint8Array: (hexString: string) => Uint8Array;
export declare const b64ToBytes: (base64: string) => Uint8Array;
export declare const findQuoteIndices: (input: string) => {
    beforeType: bigint;
    beforeChallenge: bigint;
};
export declare function parseAndNormalizeSig(derSig: Hex): {
    r: bigint;
    s: bigint;
};
type PasskeyValidatorSerializedData = {
    entryPoint: {
        address: Hex;
        version: string;
    };
    validatorAddress: Hex;
    pubKeyX: bigint;
    pubKeyY: bigint;
    authenticatorId: string;
    authenticatorIdHash: Hex;
};
export declare const serializePasskeyValidatorData: (params: PasskeyValidatorSerializedData) => string;
export declare const deserializePasskeyValidatorData: (params: string) => PasskeyValidatorSerializedData;
/**
 * Convenience function for creating a base64 encoded string from an ArrayBuffer instance
 * Copied from @hexagon/base64 package (base64.fromArrayBuffer)
 * @public
 *
 * @param {Uint8Array} uint8Arr - Uint8Array to be encoded
 * @param {boolean} [urlMode] - If set to true, URL mode string will be returned
 * @returns {string} - Base64 representation of data
 */
export declare const base64FromUint8Array: (uint8Arr: Uint8Array, urlMode: boolean) => string;
export {};
//# sourceMappingURL=utils.d.ts.map