import {
  toJsonSafe
} from "../chunk-7T6MR2TA.mjs";
import "../chunk-VZWJMN5K.mjs";

// src/verify/useFacilitator.ts
var DEFAULT_FACILITATOR_URL = "https://x402.org/facilitator";
function useFacilitator(facilitator) {
  async function verify2(payload, paymentRequirements) {
    const url = facilitator?.url || DEFAULT_FACILITATOR_URL;
    const res = await fetch(`${url}/verify`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...facilitator?.createAuthHeaders ? (await facilitator.createAuthHeaders()).verify : {}
      },
      body: JSON.stringify({
        x402Version: payload.x402Version,
        paymentPayload: toJsonSafe(payload),
        paymentRequirements: toJsonSafe(paymentRequirements)
      })
    });
    if (res.status !== 200) {
      throw new Error(`Failed to verify payment: ${res.statusText}`);
    }
    return await res.json();
  }
  async function settle2(payload, paymentRequirements) {
    const url = facilitator?.url || DEFAULT_FACILITATOR_URL;
    const res = await fetch(`${url}/settle`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...facilitator?.createAuthHeaders ? (await facilitator.createAuthHeaders()).settle : {}
      },
      body: JSON.stringify({
        x402Version: payload.x402Version,
        paymentPayload: toJsonSafe(payload),
        paymentRequirements: toJsonSafe(paymentRequirements)
      })
    });
    if (res.status !== 200) {
      throw new Error(`Failed to settle payment: ${res.statusText}`);
    }
    return await res.json();
  }
  return { verify: verify2, settle: settle2 };
}
var { verify, settle } = useFacilitator();
export {
  settle,
  useFacilitator,
  verify
};
//# sourceMappingURL=index.mjs.map